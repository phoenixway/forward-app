// src/renderer/components/GoalTextRenderer.tsx
import React, { useCallback } from "react";
import { OBSIDIAN_SCHEME_PREFIX } from "../../constants";

interface IconMarkerConfig {
  icon: string;
  markers: string[];
  className?: string;
  isSuffixOnly?: boolean;
}

const ICON_CONFIGS: IconMarkerConfig[] = [
  {
    icon: "‚ùó",
    markers: ["#critical", "! ", "!"],
    className: "text-red-500 mr-1",
    isSuffixOnly: true,
  },
  { icon: "‚òÄÔ∏è", markers: ["#day", "+ "], className: "text-yellow-500 mr-1" },
  { icon: "üóìÔ∏è", markers: ["#week", "++ "], className: "text-blue-500 mr-1" },
  {
    icon: "üéØ",
    markers: ["#middle-term", "+++ "],
    className: "text-green-500 mr-1",
  },
  {
    icon: "üî≠",
    markers: ["#long-term", "~ ", "~"],
    className: "text-purple-500 mr-1",
    isSuffixOnly: true,
  },
  {
    icon: "üì±",
    markers: ["#device"],
    className: "text-purple-500 mr-1",
    isSuffixOnly: true,
  },
  {
    icon: "üõ†Ô∏è",
    markers: ["#manual"],
    className: "text-purple-500 mr-1",
    isSuffixOnly: true,
  },
  {
    icon: "üß†",
    markers: ["mental", "pm"],
    className: "text-purple-500 mr-1",
    isSuffixOnly: true,
  },
];

interface GoalTextRendererProps {
  text: string;
  stripFields?: boolean;
  obsidianVaultName?: string;
  onTagClick?: (filterTerm: string) => void;
}

const GoalTextRenderer: React.FC<GoalTextRendererProps> = ({
  text,
  stripFields = false,
  obsidianVaultName,
  onTagClick,
}) => {
  const handleWikiLinkClick = useCallback(
    async (event: React.MouseEvent<HTMLAnchorElement>, linkContent: string) => {
      event.preventDefault(); //
      event.stopPropagation(); //

      console.log(
        "[GoalTextRenderer] handleWikiLinkClick called for link content:",
        linkContent,
      );

      // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ –Ω–∞–∑–≤–∞ Obsidian Vault
      if (!obsidianVaultName) {
        //
        const errorMessage =
          "–ù–∞–∑–≤–∞ Obsidian Vault –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è.";
        console.warn(`[GoalTextRenderer] ${errorMessage}`);
        alert(errorMessage);
        return;
      }

      // 2. –§–æ—Ä–º—É–≤–∞–Ω–Ω—è URL-—Å—Ö–µ–º–∏ –¥–ª—è Obsidian
      const obsidianUrl = `${OBSIDIAN_SCHEME_PREFIX}open?vault=${encodeURIComponent(
        obsidianVaultName,
      )}&file=${encodeURIComponent(linkContent)}`; //

      console.log(
        "[GoalTextRenderer] OBSIDIAN_SCHEME_PREFIX:",
        OBSIDIAN_SCHEME_PREFIX,
      );
      console.log(
        "[GoalTextRenderer] Attempting to open Obsidian URL:",
        obsidianUrl,
      );

      // 3. –í–∏–∫–ª–∏–∫ API –≥–æ–ª–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É Electron –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      if (
        window.electronAPI &&
        typeof window.electronAPI.openExternal === "function"
      ) {
        //
        console.log(
          "[GoalTextRenderer] window.electronAPI.openExternal is a function. Calling it...",
        );
        try {
          const result = await window.electronAPI.openExternal(obsidianUrl); //

          // 4. –û–±—Ä–æ–±–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –≤–∏–∫–ª–∏–∫—É
          if (result && result.success) {
            //
            console.log(
              `[GoalTextRenderer] Successfully initiated opening of ${obsidianUrl} via preload.`,
            );
          } else if (result && !result.success) {
            //
            const preloadErrorMessage =
              result.error || "–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤ preload-—Å–∫—Ä–∏–ø—Ç—ñ."; //
            console.error(
              `[GoalTextRenderer] Preload script failed to open link: ${preloadErrorMessage}`,
            );
            alert(`–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${preloadErrorMessage}`);
          } else if (typeof result === "undefined") {
            console.log(
              `[GoalTextRenderer] Link opening initiated (void return from preload for ${obsidianUrl}).`,
            );
          } else {
            const unexpectedResponseMessage = `–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ preload-—Å–∫—Ä–∏–ø—Ç–∞: ${JSON.stringify(result)}`;
            console.warn(`[GoalTextRenderer] ${unexpectedResponseMessage}`);
            alert(
              `–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${unexpectedResponseMessage}`,
            );
          }
        } catch (error) {
          const callErrorMessage =
            error instanceof Error ? error.message : String(error);
          console.error(
            "[GoalTextRenderer] Error calling window.electronAPI.openExternal:",
            error,
          );
          alert(
            `–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Å–ø—Ä–æ–±–∏ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: ${callErrorMessage}`,
          );
        }
      } else {
        const apiUnavailableMessage =
          "window.electronAPI or window.electronAPI.openExternal is NOT available.";
        console.error(`[GoalTextRenderer] ${apiUnavailableMessage}`);
        alert("API –¥–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö –ø–æ—Å–∏–ª–∞–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.");
      }
    },
    [obsidianVaultName],
  );

  // --- –ó–ú–Ü–ù–ï–ù–û: –§—É–Ω–∫—Ü—ñ—è parseTextAndExtractData —Ç–µ–ø–µ—Ä –∑–Ω–∞—Ö–æ–¥–∏—Ç—å [icon::...] ---
  const parseTextAndExtractData = useCallback(
    (inputText: string) => {
      let currentText = inputText;
      const fields: Array<{ name: string; value: string }> = [];
      const iconsToRender: IconMarkerConfig[] = [];

      // +++ –î–û–î–ê–ù–û: –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∞—Å—Ç–æ–º–Ω–æ—ó —ñ–∫–æ–Ω–∫–∏ +++
      let customIcon: string | null = null;

      // 1. –°–ø–æ—á–∞—Ç–∫—É —à—É–∫–∞—î–º–æ —ñ –≤–∏—Ç—è–≥—É—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É —ñ–∫–æ–Ω–∫—É
      const customIconRegex = /\[icon::\s*([^\]]+?)\s*\]/g;
      let iconMatch;
      while ((iconMatch = customIconRegex.exec(currentText)) !== null) {
        if (!customIcon) {
          // –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—É –∑–Ω–∞–π–¥–µ–Ω—É —ñ–∫–æ–Ω–∫—É
          customIcon = iconMatch[1].trim();
        }
      }
      // –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –ø–æ–ª—è [icon::...] –∑ —Ç–µ–∫—Å—Ç—É
      currentText = currentText.replace(customIconRegex, "").trim();

      // 2. –û–±—Ä–æ–±–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —ñ–∫–æ–Ω–∫–∏, —è–∫ —ñ —Ä–∞–Ω—ñ—à–µ
      for (const config of ICON_CONFIGS) {
        for (const marker of config.markers) {
          let markerFound = false;
          if (
            config.isSuffixOnly &&
            (marker === "!" || marker === "~") &&
            currentText.endsWith(marker)
          ) {
            if (
              currentText.length === marker.length ||
              (currentText.length > marker.length &&
                currentText[currentText.length - marker.length - 1] === " ")
            ) {
              markerFound = true;
            }
          } else if (currentText.includes(marker)) {
            markerFound = true;
          }

          if (markerFound) {
            if (
              !iconsToRender.find((iconConf) => iconConf.icon === config.icon)
            ) {
              iconsToRender.push(config);
            }
            if (
              config.isSuffixOnly &&
              (marker === "!" || marker === "~") &&
              currentText.endsWith(marker) &&
              !marker.endsWith(" ")
            ) {
              currentText = currentText
                .substring(0, currentText.length - marker.length)
                .trim();
            } else {
              currentText = currentText.replace(marker, "").trim();
            }
          }
        }
      }
      iconsToRender.sort(
        (a, b) => ICON_CONFIGS.indexOf(a) - ICON_CONFIGS.indexOf(b),
      );

      // 3. –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ—à—Ç—É –ø–æ–ª—ñ–≤ [key::value]
      const fieldRegex = /\[([^\]]+?)::([^\]]+?)\]/g;
      if (stripFields) {
        currentText = currentText.replace(fieldRegex, "").trim();
      } else {
        let matchWhile;
        fieldRegex.lastIndex = 0;
        const tempTextForFieldStripping = currentText;
        while (
          (matchWhile = fieldRegex.exec(tempTextForFieldStripping)) !== null
        ) {
          fields.push({
            name: matchWhile[1].trim(),
            value: matchWhile[2].trim(),
          });
        }
        currentText = currentText.replace(fieldRegex, "").trim();
      }

      currentText = currentText.replace(/\s\s+/g, " ").trim();

      // +++ –î–û–î–ê–ù–û: –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Å—Ç–æ–º–Ω—É —ñ–∫–æ–Ω–∫—É —Ä–∞–∑–æ–º –∑ —ñ–Ω—à–∏–º–∏ –¥–∞–Ω–∏–º–∏ +++
      return {
        mainText: currentText,
        fields,
        icons: iconsToRender,
        customIcon,
      };
    },
    [stripFields],
  );

  // renderStyledText —Ç–µ–ø–µ—Ä –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î onTagClick –∑ –ø—Ä–æ–ø—Å—ñ–≤
  // @ts-expegct-error
  //@ts-ignore
  const renderStyledText = (textToRender: string): JSX.Element => {
    const combinedRegex =
      /(\[\[([^|\]]+)(?:\|([^\]]+))?\]\])|(@([a-zA-Z0-9_–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ'-]+))|((?:\B|^)#([a-zA-Z0-9_–∞-—è–ê-–Ø—ñ–Ü—ó–á—î–Ñ'-]+)\b)/g;
    // @ghts-expect-error
    // @ts-ignore
    const parts: Array<string | JSX.Element> = [];
    let lastIndex = 0;
    let match;

    while ((match = combinedRegex.exec(textToRender)) !== null) {
      const fullMatchedSegment = match[0];

      if (match.index > lastIndex) {
        parts.push(textToRender.substring(lastIndex, match.index));
      }

      if (match[1]) {
        // –í—ñ–∫—ñ-–ø–æ—Å–∏–ª–∞–Ω–Ω—è
        const linkTarget = match[2];
        const linkText = match[3] || linkTarget;
        parts.push(
          <a
            href="#"
            key={`wikilink-${linkTarget}-${match.index}`}
            onClick={(e: React.MouseEvent<HTMLAnchorElement>) =>
              handleWikiLinkClick(e, linkTarget)
            }
            className="text-blue-600 dark:text-blue-400 hover:underline cursor-pointer"
            title={`–í—ñ–¥–∫—Ä–∏—Ç–∏ "${linkTarget}" –≤ Obsidian`}
          >
            {linkText}
          </a>,
        );
      } else if (match[4]) {
        // @-—Ç–µ–≥–∏ / @–º–µ—Ç–∞_—Ü—ñ–ª—ñ
        const atSign = "@";
        const tagTextWithoutPrefix = match[5];
        const fullTagText = atSign + tagTextWithoutPrefix;
        parts.push(
          <span
            key={`at-tag-${tagTextWithoutPrefix}-${match.index}`}
            className="text-pink-700 dark:text-pink-500 font-semibold cursor-pointer hover:underline"
            onClick={(e) => {
              e.stopPropagation(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å–ø–ª–∏–≤–∞–Ω–Ω—é –ø–æ–¥—ñ—ó
              if (onTagClick) {
                onTagClick(fullTagText); // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç–µ–≥ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º @
              }
            }}
            title={`–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ ${fullTagText}`}
          >
            {tagTextWithoutPrefix} {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–µ–∫—Å—Ç –ë–ï–ó @ */}
          </span>,
        );
      } else if (match[6]) {
        // #-—Ö–µ—à—Ç–µ–≥–∏
        const hashSign = "#";
        const tagTextWithoutPrefix = match[7];
        const fullTagText = hashSign + tagTextWithoutPrefix;
        parts.push(
          <span
            key={`hash-tag-${tagTextWithoutPrefix}-${match.index}`}
            className="text-green-900 dark:text-green-500 font-medium cursor-pointer hover:underline"
            onClick={(e) => {
              e.stopPropagation(); // –ó–∞–ø–æ–±—ñ–≥–∞—î–º–æ —Å–ø–ª–∏–≤–∞–Ω–Ω—é –ø–æ–¥—ñ—ó
              if (onTagClick) {
                onTagClick(fullTagText); // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç–µ–≥ –∑ –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º #
              }
            }}
            title={`–§—ñ–ª—å—Ç—Ä—É–≤–∞—Ç–∏ –∑–∞ ${fullTagText}`}
          >
            {tagTextWithoutPrefix} {/* –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ —Ç–µ–∫—Å—Ç –ë–ï–ó # */}
          </span>,
        );
      }
      lastIndex = combinedRegex.lastIndex;
    }

    if (lastIndex < textToRender.length) {
      parts.push(textToRender.substring(lastIndex));
    }

    return (
      <>
        {parts.map((part, index) => (
          <React.Fragment key={`part-${index}`}>{part}</React.Fragment>
        ))}
      </>
    );
  };

  // --- –ó–ú–Ü–ù–ï–ù–û: –û—Ç—Ä–∏–º—É—î–º–æ `customIcon` –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É –ø–∞—Ä—Å–∏–Ω–≥—É ---
  const {
    mainText: processedText,
    icons,
    customIcon,
  } = parseTextAndExtractData(text);

  return (
    // --- –ó–ú–Ü–ù–ï–ù–û: –û–Ω–æ–≤–ª—é—î–º–æ –ª–æ–≥—ñ–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É —ñ–∫–æ–Ω–æ–∫ ---
    <div className="goal-text-renderer break-words flex items-center">
      {(customIcon || icons.length > 0) && (
        <span className="icons-container mr-1 flex items-center">
          {/* –°–ø–æ—á–∞—Ç–∫—É —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –∫–∞—Å—Ç–æ–º–Ω—É —ñ–∫–æ–Ω–∫—É, —è–∫—â–æ –≤–æ–Ω–∞ —î */}
          {customIcon && (
            <span className="custom-icon mr-1" title={`–Ü–∫–æ–Ω–∫–∞: ${customIcon}`}>
              {customIcon}
            </span>
          )}
          {/* –ü–æ—Ç—ñ–º —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —ñ–∫–æ–Ω–∫–∏ */}
          {icons.map((iconConfig) => (
            <span
              key={iconConfig.icon}
              className={iconConfig.className || "mr-1"}
              title={iconConfig.markers.join(", ")}
            >
              {iconConfig.icon}
            </span>
          ))}
        </span>
      )}
      <span className="text-content">{renderStyledText(processedText)}</span>
    </div>
  );
};

export default GoalTextRenderer;
