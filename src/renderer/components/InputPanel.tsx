// src/renderer/components/InputPanel.tsx
import React, { useState, useEffect, useRef, useCallback, useImperativeHandle, forwardRef } from 'react';

export enum CommandMode {
  ADD = 'add',
  // SEARCH = 'search', // –ó–∞–∫–æ–º–µ–Ω—Ç–æ–≤–∞–Ω–æ –∞–±–æ –≤–∏–¥–∞–ª–µ–Ω–æ, —è–∫—â–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å
  LIST_NAV = 'list_nav',
  COMMAND = 'command',
}

export interface InputPanelProps {
  currentListId?: string;
  defaultMode?: CommandMode;
  onAddGoal: (listId: string, text: string) => void;
  onSearch: (query: string) => void; 
  onNavigateToList: (listQuery: string) => void;
  onExecuteCommand: (command: string) => void;
}

export interface InputPanelRef {
  focus: () => void;
  switchToMode: (mode: CommandMode, value?: string) => void;
  localInputRef?: HTMLInputElement | null; 
}

const InputPanel = forwardRef<InputPanelRef, InputPanelProps>(({
  currentListId,
  defaultMode = CommandMode.ADD,
  onAddGoal,
  onSearch, 
  onNavigateToList,
  onExecuteCommand,
}, ref) => {
  const [inputValue, setInputValue] = useState('');
  const [currentMode, setCurrentMode] = useState<CommandMode>(defaultMode);
  const [placeholder, setPlaceholder] = useState('');
  const internalLocalInputRef = useRef<HTMLInputElement>(null);

  const modeTriggers = useRef([
    { prefix: '@', mode: CommandMode.LIST_NAV, icon: 'üìú', name: '–°–ø–∏—Å–æ–∫' },
    { prefix: '>', mode: CommandMode.COMMAND, icon: '‚öôÔ∏è', name: '–ö–æ–º–∞–Ω–¥–∞' },
    // –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–µ–Ω —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å, –¥–æ–¥–∞–π —Å—é–¥–∏, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:
    // { prefix: '/', mode: CommandMode.SEARCH, icon: 'üîç', name: '–ü–æ—à—É–∫' },
  ]).current;

  useEffect(() => {
    let newPlaceholder = '';
    let icon = '‚úèÔ∏è'; 
    switch (currentMode) {
      case CommandMode.ADD:
        icon = '‚ûï';
        newPlaceholder = `–ù–æ–≤–∞ —Ü—ñ–ª—å –¥–ª—è ${currentListId ? `—Å–ø–∏—Å–∫—É '${currentListId}'` : '–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É'}...`;
        break;
      // case CommandMode.SEARCH: // –Ø–∫—â–æ —Ä–µ–∂–∏–º –ø–æ—à—É–∫—É –ø—Ä–∏–±—Ä–∞–Ω–æ
      //   icon = 'üîç';
      //   newPlaceholder = '–ü–æ—à—É–∫ —Ü—ñ–ª–µ–π...';
      //   break;
      case CommandMode.LIST_NAV:
        icon = 'üìú';
        newPlaceholder = '–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É...';
        break;
      case CommandMode.COMMAND:
        icon = '‚öôÔ∏è';
        newPlaceholder = '–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É...';
        break;
      default: newPlaceholder = '–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç...';
    }
    setPlaceholder(`${icon} ${newPlaceholder}`);
  }, [currentMode, currentListId]);

  useEffect(() => {
    setCurrentMode(defaultMode); 
  }, [defaultMode]);

  useEffect(() => {
    localStorage.setItem('inputPanelMode', currentMode);
  }, [currentMode]);

  const internalSwitchToMode = useCallback((newMode: CommandMode, newInputValue = '') => {
    if (currentMode !== newMode) {
      setCurrentMode(newMode);
    }
    setInputValue(newInputValue);
  }, [currentMode]); 

  useImperativeHandle(ref, () => ({
    focus: () => {
      internalLocalInputRef.current?.focus();
    },
    switchToMode: (mode: CommandMode, value = '') => {
        internalSwitchToMode(mode, value);
        if (internalLocalInputRef.current) {
            internalLocalInputRef.current.focus();
            setTimeout(() => { 
                if (internalLocalInputRef.current) {
                    internalLocalInputRef.current.selectionStart = internalLocalInputRef.current.value.length;
                    internalLocalInputRef.current.selectionEnd = internalLocalInputRef.current.value.length;
                }
            }, 0);
        }
    },
    get localInputRef() { return internalLocalInputRef.current; }
  }), [internalSwitchToMode]);

  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const rawValue = event.target.value;

    if (rawValue.length === 1) {
      for (const trigger of modeTriggers) {
        if (rawValue === trigger.prefix) {
          if (currentMode === trigger.mode) {
             setInputValue(''); 
             return;
          }
          internalSwitchToMode(trigger.mode, ''); 
          return;
        }
      }
    }
    
    setInputValue(rawValue);
  };

  const handleSubmit = useCallback(() => {
    const trimmedValue = inputValue.trim();

    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Ä–µ–∂–∏–º—ñ–≤, —è–∫—ñ –π–æ–≥–æ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—é—Ç—å
    if (!trimmedValue) {
      // –î–ª—è ADD, —è–∫—â–æ –Ω–µ –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ —Ü—ñ–ª—ñ, –≤—ñ–Ω –Ω–µ –ø—Ä–æ–π–¥–µ —É–º–æ–≤—É `if (currentListId && trimmedValue)` –Ω–∏–∂—á–µ.
      // –î–ª—è LIST_NAV —Ç–∞ COMMAND, –¥—ñ—è –Ω–µ –±—É–¥–µ –≤–∏–∫–æ–Ω–∞–Ω–∞ —á–µ—Ä–µ–∑ `if (trimmedValue)` –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ case.
      // –Ø–∫—â–æ —î —Ä–µ–∂–∏–º SEARCH —ñ –≤—ñ–Ω –º–æ–∂–µ –ø—Ä–∏–π–º–∞—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫ (–¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ñ—ñ–ª—å—Ç—Ä—É), 
      // —Ç–æ —Ü—è —É–º–æ–≤–∞ –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω–æ—é.
      // –ù–∞—Ä–∞–∑—ñ, —è–∫—â–æ trimmedValue –ø–æ—Ä–æ–∂–Ω—ñ–π, —Ç–æ –¥–ª—è LIST_NAV —ñ COMMAND –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è,
      // –∞ –¥–ª—è ADD —Ç–∞–∫–æ–∂, —è–∫—â–æ –Ω–µ –∑–º—ñ–Ω–∏—Ç–∏ –ª–æ–≥—ñ–∫—É.
      // –Ø–∫—â–æ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏ —Ä–µ–∂–∏–º, —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ case.
       if (currentMode === CommandMode.LIST_NAV || currentMode === CommandMode.COMMAND) {
           internalSwitchToMode(CommandMode.ADD, ''); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ ADD, —è–∫—â–æ submit –±—É–≤ –ø–æ—Ä–æ–∂–Ω—ñ–º
           return;
       }
       // –î–ª—è ADD –º–æ–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ –≤–∏–π—Ç–∏, —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ, –∞–±–æ –ø–æ–∫–∞–∑–∞—Ç–∏ alert
       // alert("–ü–æ–ª–µ –≤–≤–æ–¥—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è —Ü—ñ—î—ó –¥—ñ—ó.");
       return;
    }

    switch (currentMode) {
      case CommandMode.ADD:
        if (currentListId && trimmedValue) {
          onAddGoal(currentListId, trimmedValue);
          setInputValue(''); 
        } else if (!currentListId && trimmedValue) {
          alert("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ.");
        }
        break;
      // case CommandMode.SEARCH: // –Ø–∫—â–æ —Ü–µ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –ø—Ä–µ—Ñ—ñ–∫—Å
      //   onSearch(trimmedValue); 
      //   // –ó–∞–∑–≤–∏—á–∞–π –ø—ñ—Å–ª—è –ø–æ—à—É–∫—É –º–∏ –Ω–µ –æ—á–∏—â—É—î–º–æ –ø–æ–ª–µ —ñ –Ω–µ –∑–º—ñ–Ω—é—î–º–æ —Ä–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ
      //   break;
      case CommandMode.LIST_NAV: 
        if (trimmedValue) { 
            onNavigateToList(trimmedValue);
        }
        internalSwitchToMode(CommandMode.ADD, '');
        break;
      case CommandMode.COMMAND:
        if (trimmedValue) { 
            onExecuteCommand(trimmedValue); 
        }
        internalSwitchToMode(CommandMode.ADD, '');
        break;
      default:
        console.warn("InputPanel handleSubmit: Unknown mode:", currentMode);
    }
  }, [inputValue, currentMode, currentListId, onAddGoal, onSearch, onNavigateToList, onExecuteCommand, internalSwitchToMode]);

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === 'Enter' && !event.shiftKey) {
        event.preventDefault();
        handleSubmit();
    } else if (event.key === 'Escape') {
        internalLocalInputRef.current?.blur(); 
        if (currentMode !== CommandMode.ADD) {
            internalSwitchToMode(CommandMode.ADD, '');
        } else if (inputValue !== '') { 
            setInputValue('');
        }
    } else if (event.key === 'Backspace' && inputValue === '') {
        if (currentMode !== CommandMode.ADD) {
            internalSwitchToMode(CommandMode.ADD, '');
        }
    }
  };

  return (
    <div className="w-full"> 
      <input
        ref={internalLocalInputRef}
        type="text"
        value={inputValue} 
        onChange={handleInputChange}
        onKeyDown={handleKeyDown}
        placeholder={placeholder}
        className="w-full px-3 py-2 text-sm border border-slate-300 dark:border-slate-600 rounded-md 
                   bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100
                   focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400 
                   focus:border-indigo-500 dark:focus:border-indigo-400
                   placeholder-slate-400 dark:placeholder-slate-500"
        aria-label="–ö–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫"
      />
    </div>
  );
});

export default InputPanel;