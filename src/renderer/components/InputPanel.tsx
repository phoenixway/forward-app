// src/renderer/components/InputPanel.tsx
import React, {
  useState,
  useEffect,
  useRef,
  useCallback,
  useImperativeHandle,
  forwardRef,
} from "react";

import { useSelector } from "react-redux";
import { RootState } from "../store/store";
import type { GoalList } from "../types";

export enum CommandMode {
  ADD = "add",
  LIST_NAV = "list_nav",
  COMMAND = "command",
}

export interface InputPanelProps {
  currentListId?: string;
  defaultMode?: CommandMode;
  onAddGoal: (listId: string, text: string) => void;
  onSearch: (query: string) => void;
  onNavigateToList: (listQuery: string) => void;
  onExecuteCommand: (command: string) => void;
}

export interface InputPanelRef {
  focus: () => void;
  switchToMode: (mode: CommandMode, value?: string) => void;
  localInputRef?: HTMLInputElement | null;
}

const InputPanel = forwardRef<InputPanelRef, InputPanelProps>(
  (
    {
      currentListId,
      defaultMode = CommandMode.ADD,
      onAddGoal,
      onSearch,
      onNavigateToList,
      onExecuteCommand,
    },
    ref,
  ) => {
    const [inputValue, setInputValue] = useState("");
    const [currentMode, setCurrentMode] = useState<CommandMode>(defaultMode);
    const [placeholder, setPlaceholder] = useState("");
    const internalLocalInputRef = useRef<HTMLInputElement>(null);

    const allLists = useSelector((state: RootState) => state.lists.goalLists);

    const modeTriggers = useRef([
      { prefix: "@", mode: CommandMode.LIST_NAV, icon: "üìú", name: "–°–ø–∏—Å–æ–∫" },
      { prefix: ">", mode: CommandMode.COMMAND, icon: "‚öôÔ∏è", name: "–ö–æ–º–∞–Ω–¥–∞" },
    ]).current;

    useEffect(() => {
      let newPlaceholderText = "";
      let icon = "‚úèÔ∏è";
      let listDisplayName = "–ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É";

      if (currentListId) {
        const list = allLists[currentListId];
        if (list) {
          listDisplayName = `—Å–ø–∏—Å–∫—É '${list.name}'`;
        } else {
          listDisplayName = `—Å–ø–∏—Å–∫—É –∑ ID '${currentListId}' (–Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ)`;
        }
      }

      switch (currentMode) {
        case CommandMode.ADD:
          icon = "‚ûï";
          newPlaceholderText = `–ù–æ–≤–∞ —Ü—ñ–ª—å –¥–ª—è ${listDisplayName}...`;
          break;
        case CommandMode.LIST_NAV:
          icon = "üìú";
          newPlaceholderText = "–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Å–ø–∏—Å–∫—É (ID –∞–±–æ –Ω–∞–∑–≤–∞)...";
          break;
        case CommandMode.COMMAND:
          icon = "‚öôÔ∏è";
          newPlaceholderText = "–í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É (> new-list –ù–∞–∑–≤–∞)...";
          break;
        default:
          newPlaceholderText = "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç...";
      }
      setPlaceholder(`${icon} ${newPlaceholderText}`);
    }, [currentMode, currentListId]);

    useEffect(() => {
      setCurrentMode(defaultMode);
    }, [defaultMode]);

    // localStorage –¥–ª—è —Ä–µ–∂–∏–º—É –≤–≤–æ–¥—É - —Ü–µ –ª–æ–∫–∞–ª—å–Ω–∞ —Ñ—ñ—á–∞, –Ω–µ –ø–æ–≤'—è–∑–∞–Ω–∞ –∑—ñ —Å—Ç–æ—Ä–æ–º
    useEffect(() => {
      localStorage.setItem("inputPanelMode", currentMode);
    }, [currentMode]);

    const internalSwitchToMode = useCallback(
      (newMode: CommandMode, newInputValue = "") => {
        // –ù–µ –∑–º—ñ–Ω—é—î–º–æ —Ä–µ–∂–∏–º, —è–∫—â–æ –≤—ñ–Ω –≤–∂–µ —Ç–∞–∫–∏–π —Å–∞–º–∏–π, –ø—Ä–æ—Å—Ç–æ –æ–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è
        if (currentMode !== newMode) {
          setCurrentMode(newMode);
        }
        setInputValue(newInputValue);
        if (internalLocalInputRef.current) {
          internalLocalInputRef.current.focus();
        }
      },
      [currentMode],
    );

    useImperativeHandle(
      ref,
      () => ({
        focus: () => {
          internalLocalInputRef.current?.focus();
        },
        switchToMode: (mode: CommandMode, value = "") => {
          internalSwitchToMode(mode, value); // –í–æ–Ω–∞ –≤–∂–µ —Ñ–æ–∫—É—Å—É—î
          // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è –∫—É—Ä—Å–æ—Ä–∞ –ø—ñ—Å–ª—è —Ñ–æ–∫—É—Å—É
          setTimeout(() => {
            if (internalLocalInputRef.current) {
              const len = internalLocalInputRef.current.value.length;
              internalLocalInputRef.current.selectionStart = len;
              internalLocalInputRef.current.selectionEnd = len;
            }
          }, 0);
        },
        get localInputRef() {
          return internalLocalInputRef.current;
        },
      }),
      [internalSwitchToMode],
    );

    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {
      const rawValue = event.target.value;

      if (currentMode === CommandMode.ADD && rawValue.length === 1) {
        // –¢—ñ–ª—å–∫–∏ –∑ —Ä–µ–∂–∏–º—É ADD –º–æ–∂–Ω–∞ –ø–µ—Ä–µ–π—Ç–∏ –≤ —ñ–Ω—à–∏–π –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º
        for (const trigger of modeTriggers) {
          if (rawValue === trigger.prefix) {
            internalSwitchToMode(trigger.mode, "");
            return;
          }
        }
      }
      setInputValue(rawValue);
    };

    const handleSubmit = useCallback(() => {
      const trimmedValue = inputValue.trim();

      if (
        !trimmedValue &&
        (currentMode === CommandMode.LIST_NAV ||
          currentMode === CommandMode.COMMAND)
      ) {
        internalSwitchToMode(CommandMode.ADD, "");
        return;
      }
      // –î–ª—è ADD, —è–∫—â–æ –ø–æ—Ä–æ–∂–Ω—å–æ, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ, –±–æ onAddGoal –Ω–µ –±—É–¥–µ –≤–∏–∫–ª–∏–∫–∞–Ω–∏–π
      if (!trimmedValue && currentMode === CommandMode.ADD) {
        return;
      }

      switch (currentMode) {
        case CommandMode.ADD:
          if (currentListId && trimmedValue) {
            onAddGoal(currentListId, trimmedValue); // MainPanel –≤–∏–∫–ª–∏—á–µ goalListStore.createGoalAndAddToList
            setInputValue("");
          } else if (!currentListId && trimmedValue) {
            alert("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –∞–±–æ –≤—ñ–¥–∫—Ä–∏–π—Ç–µ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ.");
          }
          // –Ø–∫—â–æ trimmedValue –ø–æ—Ä–æ–∂–Ω—ñ–π, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ (onAddGoal –Ω–µ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è)
          break;
        case CommandMode.LIST_NAV:
          if (trimmedValue) {
            onNavigateToList(trimmedValue);
          }
          // –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ ADD –ø—ñ—Å–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –∞–±–æ —Å–ø—Ä–æ–±–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
          internalSwitchToMode(CommandMode.ADD, "");
          break;
        case CommandMode.COMMAND:
          if (trimmedValue) {
            onExecuteCommand(trimmedValue);
          }
          // –ó–∞–≤–∂–¥–∏ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –≤ ADD –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Å–ø—Ä–æ–±–∏ –∫–æ–º–∞–Ω–¥–∏
          internalSwitchToMode(CommandMode.ADD, "");
          break;
        default:
          console.warn("InputPanel handleSubmit: Unknown mode:", currentMode);
      }
    }, [
      inputValue,
      currentMode,
      currentListId,
      onAddGoal,
      onNavigateToList,
      onExecuteCommand,
      internalSwitchToMode,
    ]);

    const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        handleSubmit();
      } else if (event.key === "Escape") {
        if (currentMode !== CommandMode.ADD || inputValue !== "") {
          internalSwitchToMode(CommandMode.ADD, ""); // –Ø–∫—â–æ –Ω–µ –≤ ADD –∞–±–æ —î —Ç–µ–∫—Å—Ç, –æ—á–∏—Å—Ç–∏—Ç–∏/–ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏
        } else {
          internalLocalInputRef.current?.blur(); // –Ø–∫—â–æ –≤–∂–µ –≤ ADD —ñ –ø–æ—Ä–æ–∂–Ω—å–æ, –ø—Ä–æ—Å—Ç–æ –∑–Ω—è—Ç–∏ —Ñ–æ–∫—É—Å
        }
      } else if (event.key === "Backspace" && inputValue === "") {
        // –Ø–∫—â–æ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—î —ñ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ Backspace –≤ —Ä–µ–∂–∏–º—ñ LIST_NAV –∞–±–æ COMMAND, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ ADD
        if (currentMode !== CommandMode.ADD) {
          internalSwitchToMode(CommandMode.ADD, "");
        }
      }
    };

    return (
      <div className="w-full">
        <input
          ref={internalLocalInputRef}
          type="text"
          value={inputValue}
          onChange={handleInputChange}
          onKeyDown={handleKeyDown}
          placeholder={placeholder}
          className="w-full px-3 py-2 text-sm border border-slate-300 dark:border-slate-600 rounded-md
                   bg-white dark:bg-slate-800 text-slate-900 dark:text-slate-100
                   focus:outline-none focus:ring-2 focus:ring-indigo-500 dark:focus:ring-indigo-400
                   focus:border-indigo-500 dark:focus:border-indigo-400
                   placeholder-slate-400 dark:placeholder-slate-500"
          aria-label="–ö–æ–º–∞–Ω–¥–Ω–∏–π —Ä—è–¥–æ–∫"
        />
      </div>
    );
  },
);

export default InputPanel;
